from django.middleware.csrf import get_token
from django.http import HttpResponse
from django.shortcuts import render
from render_block import render_block_to_string

from .models import Banner, Faq, HomeCarouselImage
from blog.models import Blog
from abstractapp.custom_context_processors import global_context

# Create your views here.


def index(request):
    """
    Render the index page with the required data.

    Args:
        request: The HTTP request object.

    Returns:
        If the request is a HX-Request, returns a rendered HTML string.
        Otherwise, returns a rendered HTML response.

    """
    # Retrieve active FAQs ordered by custom_order
    faqs = Faq.objects.active().order_by('-custom_order')

    # Retrieve active blog entries limited to 3
    blog = Blog.objects.active().all()[:3]

    # Retrieve active HomeCarouselImages ordered by custom_order
    carousels = HomeCarouselImage.objects.active().all().order_by('-custom_order')

    # Retrieve the first active Banner ordered by custom_order
    banner = Banner.objects.active().order_by('-custom_order').first()

    # Create a context dictionary with all the retrieved data
    context = {
        'faqs': faqs,
        'blog': blog,
        'carousels': carousels,
        'banner': banner,
    }

    # Check if the request is a HX-Request
    if request.headers.get('HX-Request') == 'true':
        # If it is, render the 'content' block to a string
        html = render_block_to_string('pages/index.html', 'content', context)
        # Return the rendered HTML as a response
        return HttpResponse(html)

    # If it's not a HX-Request, render the 'pages/index.html' template with the context
    return render(request, 'pages/index.html', context)


def about(request):
    """
    View function that handles the 'about' page.

    Args:
        request (HttpRequest): The HTTP request object.

    Returns:
        HttpResponse: The HTTP response generated by the view.
    """

    # Get the global context for the request
    context = global_context(request)

    # Add the CSRF token to the context
    context["csrf_token"] = get_token(request)

    if request.META.get('HTTP_HX_REQUEST') == 'true':
        # If the request is an HX request, render the 'content' block of the 'pages/about.html' template
        html = render_block_to_string('pages/about.html', 'content', context)
        return HttpResponse(html)

    # Render the 'pages/about.html' template
    return render(request, 'pages/about.html')


def contact(request):
    """
    View function for the contact page.
    """
    # Generate the global context for the request
    context = global_context(request)

    # Add the CSRF token to the context
    context["csrf_token"] = get_token(request)

    # Check if the request is a HX-Request
    if request.headers.get('HX-Request') == 'true':
        # Render the 'content' block of the 'pages/contact.html' template to a string
        html = render_block_to_string('pages/contact.html', 'content', context)
        # Return the HTML response
        return HttpResponse(html)

    # Render the 'pages/contact.html' template with the context and return the response
    return render(request, 'pages/contact.html', context)
