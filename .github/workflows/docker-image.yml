name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set TAG variable
      run: |
        echo "TAG=$(date +%Y%m%d-%H%M%S -d @$(( $(date +%s) )))" >> $GITHUB_ENV


    - name: Build the Docker image
      run: |
        echo "TZ=Asia/Shanghai" >> $GITHUB_ENV
        TAG=${{ env.TAG }} docker-compose --file docker-compose.ci.yml build

    - name: Use TAG variable
      run: echo "Tag is ${{ env.TAG }}"

    # Add your Docker push steps here, using ${{ env.TAG }} to reference the tag
    
    - name: Push the Docker images
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push qrkks3/tradingweb:django-${{ env.TAG }}
        docker push qrkks3/tradingweb:nginx-${{ env.TAG }}

    - name: Copy docker-compose.prod.yml to Server
      uses: appleboy/scp-action@master
      with:
        # host: ${{ secrets.SERVER_HOST }}
        # username: ${{ secrets.SERVER_USERNAME }}
        # password: ${{ secrets.SERVER_PASSWORD }}
        # target: "/root"
        host: ${{ secrets.US_SERVER_HOST }}
        username: ${{ secrets.US_SERVER_USERNAME }}
        password: ${{ secrets.US_SERVER_PASSWORD }}
        target: "/home/lighthouse"

        source: "docker-compose.prod.yml"

    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        # host: ${{ secrets.SERVER_HOST }}
        # username: ${{ secrets.SERVER_USERNAME }}
        # password: ${{ secrets.SERVER_PASSWORD }}
        host: ${{ secrets.US_SERVER_HOST }}
        username: ${{ secrets.US_SERVER_USERNAME }}
        password: ${{ secrets.US_SERVER_PASSWORD }}
        script: |
          # cd /root

          # 检查是否存在 docker-compose.yml 文件，并备份
          if [ -f docker-compose.yml ]; then
              echo "docker-compose.yml exists, creating backup."
              mv docker-compose.yml docker-compose.backup.yml
          fi

          # 复制 docker-compose.prod.yml 到 docker-compose.yml
          cp docker-compose.prod.yml docker-compose.yml

          # 设置环境变量
          export TAG=${{ env.TAG }}
          echo "Using TAG: $TAG"

          # 更新 .env 文件的逻辑
          KEY="TAG"
          VALUE="$TAG"
          FILE=".env"
          if grep -q "^${KEY}=" "$FILE"; then
              sed -i "s/^${KEY}=.*/${KEY}=${VALUE}/" "$FILE"
          else
              echo "${KEY}=${VALUE}" >> "$FILE"
          fi

          # Docker Compose 命令

          docker-compose down          
          # 删除含有 static_volume 的容器并保留日志
          VOLUMES_TO_DELETE=$(docker volume ls -q | grep 'static_volume')
          echo "Volumes to be deleted: $VOLUMES_TO_DELETE"
          echo $VOLUMES_TO_DELETE | xargs -r docker volume rm || true
          # docker volume ls -q | grep 'static_volume' | xargs -r docker volume rm || true

          docker-compose pull
          docker-compose up -d
      env:
        TAG: ${{ env.TAG }}
