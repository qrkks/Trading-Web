# upstream django {
#     server django:8000;
#     server django:8000;
#     server django:8000;
#     server django:8000;
# }
server {
    listen 80;
    server_name ciyetrading.com;

    # 将所有HTTP请求重定向到HTTPS
    return 301 https://$host$request_uri;
}

server {

    #SSL 默认访问端口号为 443
    listen 443 ssl; 
    #请填写绑定证书的域名
    server_name ciyetrading.com; 
    #请填写证书文件的相对路径或绝对路径
    ssl_certificate /etc/ssl/certs/ciyetrading.com_bundle.crt;
    #请填写私钥文件的相对路径或绝对路径
    ssl_certificate_key /etc/ssl/private/ciyetrading.com.key;

    ssl_session_timeout 5m;
    # 作用：这个指令设置SSL会话的超时时间。在这个示例中，5m表示会话将在5分钟后超时。SSL会话重用可以加快后续请求的连接时间，因为客户端和服务器可以重用之前协商的安全参数，而不必重新进行整个握手过程。
    # 是否必要：配置会话超时是一个好的做法，可以平衡性能和安全性。

    ssl_protocols TLSv1.2 TLSv1.3; 
    # 作用：这个指令指定Nginx服务器支持哪些SSL/TLS协议版本。TLSv1.2和TLSv1.3是目前被广泛认为安全的版本。
    # 是否必要：是的，这是必要的配置。明确指定支持的协议版本有助于防止使用旧版、可能不安全的协议。

    #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; 
    # 作用：定义服务器支持的加密套件（cipher suites）。这里列出的套件被认为是安全的，并且排除了一些已知不安全或弱的加密方法，如aNULL、MD5、RC4和DHE。
    # 是否必要：是的，配置加密套件是提高安全性的关键。它确保了数据传输的加密质量，并防止使用已知存在漏洞的加密方法。

    ssl_prefer_server_ciphers on;
    # 作用：这个指令告诉Nginx优先使用服务器指定的加密套件，而不是客户端提出的加密套件。
    # 是否必要：是的，配置此项可以增强安全性，因为它允许服务器选择最安全的加密套件，而不是依赖于客户端的选择。

    client_max_body_size 100M;

    location / {
        # proxy_pass http://django;
        proxy_pass http://django:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /static/;
    }

    location /media/ {
        alias /media/;
    }
}

server {
    listen 80;
    server_name fs.ciyetrading.com;

    location / {
        rewrite ^ http://47.95.221.116$request_uri? permanent;
    }
}
